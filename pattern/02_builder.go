package pattern

/*
	Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Builder_pattern
*/

// Строитель (Builder) - шаблон проектирования, который инкапсулирует создание объекта
// и позволяет разделить его на различные этапы.

// Шаблон проектирования строитель состоить из 4 компонентов:
// Product: представляет объект, который должен быть создан.
// Builder: определяет интерфейс для создания различных частей объекта Product.
// ConcreteBuilder: конкретная реализация Buildera.
// Создает объект Product и определяет интерфейс для доступа к нему.
// Director: распорядитель - создает объект, используя объекты Builder.

// Паттерн строитель применяется когда процесс создания нового объекта не должен зависеть от того,
// из каких частей этот объект состоит и как эти части связаны между собой.
// Строитель применяется когда необходимо обеспечить получение различных вариаций объекта в процессе его создания.

// Паттер строитель позволяет изменять внутреннее представление продукта.
// Объект Builder предоставляет распорядителю абстрактный интерфейс для конструирования продукта,
// за которым он может скрыть представление и внутреннюю структуру продукта, а также процесс его сборки.
// Поскольку продукт конструируется через абстрактный интерфейс, то для изменения внутреннего представления
// достаточно всего лишь определить новый вид строителя.

// Строитель изолирует код, реализующий конструирование и представление.
// Улучшается модульность, инкапсулируя способ конструирования и представления сложного объекта.

// Строитель предоставляет более точный контроль над процессом конструирования.
// В отличие от порождающих паттернов, которые сразу конструируют весь объект целиком,
// builder делает это шаг за шагом под управлением director. Когда продукт завершен, director забирает его у builder.

// Строители конструируют свои продукты шаг за шагом, поэтому интерфейс класса Builder должен быть достаточно общим,
// чтобы обеспечить конструирование при любом виде конкретного строителя.

// В данном случае конкретным объектом выступает World.

// Интерфейс Builder определяет 5 методов, которые будут доступны распорядителю

// *Dimens*World*Build стуктуры представляют конкретного билдера, который в зависимости от реализации
// может создать обычный 3-х мерный мир с обычными законами, или сделать его двухмерным, или исказить
// фундаментальные законы

type Space any
type Substance any
type FundamentalLaws []any
type Time func(Space, Substance) (Space, Substance)

type World struct {
	SP Space
	SS Substance
	FL FundamentalLaws
	TM Time
}

type Builder interface {
	MakeSpace()
	MakeSubstance()
	MakeFundamentalLaws()
	MakeTime()
	Build() *World
}

type Director struct {
	builder Builder
}

func NewDirector(buider Builder) *Director {
	return &Director{builder: buider}
}

func (b *Director) SetBuilder(builder Builder) {
	b.builder = builder
}

func (b *Director) BuildWorld() *World {
	b.builder.MakeSpace()
	b.builder.MakeSubstance()
	b.builder.MakeFundamentalLaws()
	b.builder.MakeTime()
	return b.builder.Build()
}

type TwoDimensWorldBuild struct {
}

type ThreeDimensWorldBuild struct {
}

type ThreeDimensWorldWithMagicBuild struct {
}

type ThreeDimensWorldWithWrongFLBuild struct {
}
